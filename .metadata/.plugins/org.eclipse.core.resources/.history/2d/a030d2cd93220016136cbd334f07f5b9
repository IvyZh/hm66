import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.RandomAccessFile;
import java.net.HttpURLConnection;
import java.net.URL;

public class DownLoad {
	private static int threadCount = 3;

	public static void main(String[] args) {

		new Thread(new Runnable() {

			public void run() {
				String path = "http://192.168.1.5/hello1/epp.exe";
				try {
					URL url = new URL(path);
					HttpURLConnection conn = (HttpURLConnection) url
							.openConnection();
					conn.setRequestMethod("GET");

					conn.setReadTimeout(8000);
					conn.setConnectTimeout(8000);

					if (conn.getResponseCode() == 200) {
						RandomAccessFile raf = new RandomAccessFile(new File(
								getNameFromPath(path)), "rwd");

						int length = conn.getContentLength();// 文件长度

						raf.setLength(length);
						raf.close();
						System.out.println("-----length----" + length);

						// 根据
						for (int i = 0; i < threadCount; i++) {
							long startIndex = i * length / 3;
							long endIndex = (i + 1) * length / 3 - 1;
							if (i == threadCount) {
								endIndex = length;
							}

							MyThread thread = new MyThread(startIndex,
									endIndex, i);
							thread.start();

						}

					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}

		}).start();

	}

	public static String getNameFromPath(String path) {
		int index = path.lastIndexOf("/") + 1;
		return path.substring(index);
	}

}

class MyThread extends Thread {
	private final int threadId;
	private final long endIndex;
	private final long startIndex;
	private static int compeleteCount=0;

	MyThread(long startIndex, long endIndex, int threadId) {
		this.startIndex = startIndex;
		this.endIndex = endIndex;
		this.threadId = threadId;
	}

	public void run() {
		System.out
				.println("Num" + threadId + ":" + startIndex + "~" + endIndex);
		down(startIndex, endIndex, threadId);
	}

	public static void down(long startIndex, long endIndex, int threadId) {

		
		String path = "http://192.168.1.5/hello1/epp.exe";
		try {
			File file = new File(threadId+".txt");
			if(file.exists()){
				FileInputStream fis = new FileInputStream(file);
				BufferedReader br = new BufferedReader(new InputStreamReader(fis));
				String startProcess = br.readLine();
				startIndex = Long.valueOf(startProcess).longValue() + startIndex;
				System.out.println(threadId+"=====断点开始:"+startIndex);
			}
			
			
			URL url = new URL(path);
			HttpURLConnection conn = (HttpURLConnection) url.openConnection();
			conn.setRequestMethod("GET");

			conn.setReadTimeout(8000);
			conn.setConnectTimeout(8000);

			conn.setRequestProperty("Range", "bytes=" + startIndex + "-"
					+ endIndex);
			if (conn.getResponseCode() == 206) {
				RandomAccessFile raf = new RandomAccessFile(new File(
						DownLoad.getNameFromPath(path)), "rwd");
				raf.seek(startIndex);
				

				InputStream is = conn.getInputStream();
				int total = 0;
				int len = 0;
				byte[] b = new byte[1024];
				while ((len = is.read(b)) != -1) {
					Thread.sleep(10);
					raf.write(b, 0, len);
					total += len;
					System.out.println(threadId + "--" + total);
					FileOutputStream fos = new FileOutputStream(threadId+".txt");
					fos.write((total+"").getBytes());
					fos.close();
				}

				raf.close();

				System.out.println(threadId + "-----end----");
				compeleteCount ++;
				if(compeleteCount==3){
					System.out.println("全部完成，删除文件");
					new File(threadId+".txt").delete();
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

}